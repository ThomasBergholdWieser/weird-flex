@page


@model Tieto.Lama.PrintApi.Pages.IndexModel
@{
    ViewBag.Title = "Overview";
    ViewBag.SubTitle = "Service Status " + Model.ViewModel.Timestamp + ", CompanyId: " + Model.ViewModel.CompanyId;
    ViewBag.ShowReload = true;
}

<div class="card-deck mb-5 text-left mt-5 mr-5">
    <div class="card mb-4 shadow-sm">
        <div class="card-header">
            <h4 class="my-0 font-weight-normal">Database Status</h4>
        </div>
        <div class="card-body">
            <h2 class="card-title">
                Connected: @if (Model.ViewModel?.DbInfo?.IsAvailable ?? false)
                {
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check-circle-fill" fill="green" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                    </svg>
                }
                else
                {
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill" fill="red" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                    </svg>
                }
            </h2>
            <table class="card-table table">
                <tbody>
                    @foreach (var item in Model.ViewModel?.DbInfo?.TableSizes ?? Array.Empty<Tieto.Lama.Data.Unbound.TableSizeInfoModel>())
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.TableName)</td>
                            <td><code>@Html.DisplayFor(modelItem => item.SizeInMb) Mb</code></td>
                            <td></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header">
            <h4 class="my-0 font-weight-normal">Bartender</h4>
        </div>
        <div class="card-body">
            <h2 class="card-title">
                Connected: @if (Model.PrintJobHandlerMonitor.IsConnected == true)
                {
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check-circle-fill" fill="green" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                    </svg>
                }
                else if (Model.PrintJobHandlerMonitor.IsConnected == false)
                {
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill" fill="red" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                    </svg>
                }
                else
                {
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-question-circle" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                        <path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z" />
                    </svg>
                }

            </h2>
            <table class="card-table table">
                <tbody>
                    <tr>
                        <td>
                            @if (Model.PrintJobHandlerMonitor.Timestamp == null)
                            {
                                <label>Monitor Timestamp: N/A</label>
                            }
                            else
                            {
                                <label>Monitor Timestamp: <br/><code>@Html.DisplayFor(model => model.PrintJobHandlerMonitor.Timestamp)</code></label>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button type="button" class="btn btn-outline-secondary" data-toggle="tooltip" data-placement="bottom"
                                    data-template="<div class='tooltip' role='tooltip'><div class='arrow'></div><div class='tooltip-inner' style='max-width: 400px;'></div></div>"
                                    title="@Model.PrintJobHandlerMonitor.ServiceUri)">
                                @Html.DisplayNameFor(model => model.PrintJobHandlerMonitor.ServiceUri)
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header">
            <h4 class="my-0 font-weight-normal">StockData Receiver</h4>
        </div>
        <div class="card-body">
            <h2 class="card-title">
                Connected: @if (Model.IsBusConnected)
                {
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check-circle-fill" fill="green" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                    </svg>
                }
                else
                {
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill" fill="red" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                    </svg>
                }
            </h2>
            <table class="card-table table">
                <tbody>
                    <tr>
                        <td>
                            @Html.DisplayNameFor(model => model.StockDataReceiverMonitor.Status): <b>@Html.DisplayFor(model => model.StockDataReceiverMonitor.Status)</b>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DisplayNameFor(model => model.StockDataReceiverMonitor.Mailbox)<br />
                            <code>
                                @Html.DisplayFor(model => model.StockDataReceiverMonitor.Mailbox)
                            </code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DisplayNameFor(model => model.StockDataReceiverMonitor.ExchangeName)<br />
                            <code>
                                @Html.DisplayFor(model => model.StockDataReceiverMonitor.ExchangeName)
                            </code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DisplayNameFor(model => model.StockDataReceiverMonitor.QueueName)<br />
                            <code>
                                @Html.DisplayFor(model => model.StockDataReceiverMonitor.QueueName)
                            </code>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="card mb-4 shadow-sm">
        <div class="card-header">
            <h4 class="my-0 font-weight-normal">PrintJob Receiver</h4>
        </div>
        <div class="card-body">
            <h2 class="card-title">
                Connected: @if (Model.IsBusConnected)
                {
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-check-circle-fill" fill="green" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                    </svg>
                }
                else
                {
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x-circle-fill" fill="red" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z" />
                    </svg>
                }
            </h2>
            <table class="card-table table">
                <tbody>
                    <tr>
                        <td>
                            @Html.DisplayNameFor(model => model.PrintJobReceiverMonitor.Status): <b>@Html.DisplayFor(model => model.PrintJobReceiverMonitor.Status)</b>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DisplayNameFor(model => model.PrintJobReceiverMonitor.Mailbox)<br />
                            <code>
                                @Html.DisplayFor(model => model.PrintJobReceiverMonitor.Mailbox)
                            </code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DisplayNameFor(model => model.PrintJobReceiverMonitor.ExchangeName)<br />
                            <code>
                                @Html.DisplayFor(model => model.PrintJobReceiverMonitor.ExchangeName)
                            </code>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.DisplayNameFor(model => model.PrintJobReceiverMonitor.QueueName)<br />
                            <code>
                                @Html.DisplayFor(model => model.PrintJobReceiverMonitor.QueueName)
                            </code>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
